{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","name","src","id","CardList","monsters","map","monster","SearchBox","searchEventHandler","placeholder","type","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","res","json","data","this","filteredMonsters","filter","toLocaleLowerCase","includes","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAYeA,EAVF,SAACC,GAEZ,OACE,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAKF,EAAMG,KAAMC,IAAG,+BAA0BJ,EAAMK,GAAhC,4BAC3B,6BAAKL,EAAMG,WCIFG,G,MARE,SAACN,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMO,SAASC,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,eAA2BA,GAAhBA,EAAQJ,WCI3CK,G,MARG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,mBAAoBC,EAAkB,EAAlBA,YACvC,OACE,8BACE,uBAAOX,UAAU,SAASY,KAAK,SAASD,YAAaA,EAAaE,SAAUH,QCyCnEI,G,wDAtCb,aAAe,IAAD,8BACZ,gBAgBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAUhC,WACE,MAAkCC,KAAKN,MAA/Bf,EAAR,EAAQA,SAAUY,EAAlB,EAAkBA,YAEZU,EAAmBtB,EAASuB,QAAO,SAAArB,GAAO,OAAIA,EAAQN,KAAK4B,oBAAoBC,SAASb,EAAYY,wBAE1G,OADAE,QAAQC,IAAIL,GAEV,sBAAK5B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWU,mBAAoBiB,KAAKZ,eAAgBJ,YAAY,mBAChE,cAAC,EAAD,CAAUL,SAAUsB,W,GAjCVM,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c255f6e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\nconst Card = (props) => {\n    // console.log(props.id, props.name)\n  return (\n    <div className=\"card-container\">\n        <img alt={props.name} src={`https://robohash.org/${props.id}?set=set2&size=180x180`} />\n      <h2>{props.name}</h2>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from '../card/card.component'\nimport \"./card-list.styles.css\";\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => <Card key={monster.id} {...monster} />)}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./search-box.styles.css\"\nconst SearchBox = ({ searchEventHandler, placeholder }) => {\n  return (\n    <div>\n      <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={searchEventHandler}  />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import { Component } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => {\n        // console.log(data)\n        this.setState({ monsters: data });\n\n      });\n  }\n  onSearchChange = (e) => {\n    this.setState({searchField: e.target.value})\n\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()))\n    console.log(filteredMonsters)\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox searchEventHandler={this.onSearchChange} placeholder=\"Search Monster\" />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}